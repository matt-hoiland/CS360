/*
 * Downloader.h
 *
 *  Created on: Jan 19, 2016
 *      Author: matt
 */

#ifndef DOWNLOADER_H_
#define DOWNLOADER_H_

#include <iostream>

#include <errno.h>      //nope
#include <netdb.h>      //yup
#include <stdio.h>      //yup
#include <stdlib.h>     //yup
#include <string.h>     //yup
#include <sys/types.h>  //yup
#include <sys/socket.h> //yup
#include <unistd.h>     //yup

class Downloader {
private:
	std::string hostname;
	unsigned int port;
	std::string url;
	bool debug;
	unsigned int count;

	int server;

	bool supressBody() {
		return count > 1;
	}

	void create() {
		struct sockaddr_in serverAddress;

		struct hostent* hostEntry;
		hostEntry = gethostbyname(hostname.c_str());
		if (!hostEntry) {
			std::cout << "Err: Couldn't resolve the hostname: " << hostname << "." << std::endl;
			exit(-1);
		}

		memset(&serverAddress, 0, sizeof(serverAddress));
		serverAddress.sin_family = AF_INET;
		serverAddress.sin_port = htons(port);
		memcpy(&serverAddress, hostEntry->h_addr_list[0], hostEntry->h_length);

		server = socket(PF_INET, SOCK_STREAM, 0);
		if (!server) {
			std::cout << "Err: Could not allocate a fresh socket" << std::endl;
			exit(-1);
		}

		if (connect(server, (const struct sockaddr*) &serverAddress, sizeof(serverAddress)) < 0) {
			std::cout << "Err: Couldn't connect to the address" << std::endl;
			exit(-1);
		}
		std::cout << "So far so good!" << std::endl;
	}

	void download() {

	}

	void close() {
		close(server);
	}

public:
	Downloader(std::string hostname, unsigned int port, std::string url, bool debug, int count) :
		hostname(hostname), port(port), url(url), debug(debug), count(count), server(-1) {}

	void run() {
		create();
		for (int i = 0; i < count; i++) {
			download();
		}
		close();
	}
};


#endif /* DOWNLOADER_H_ */
